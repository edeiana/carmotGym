#!/bin/bash

# Check number of inputs
numOfInputs=3 ;
if test $# -lt ${numOfInputs} ; then
  echo "USAGE: $ ./`basename $0` pathToSerialDir pathToParallelDir pathToSpeedupOutputFile" ;
  exit 1 ;
fi

# Get inputs
baseline_dir="${1}" ;
times_dir="${2}" ;
output_file="${3}" ;

if ! test -e ${baseline_dir} ; then
  echo "WARNING: ${baseline_dir} not found." ;
  exit 0 ;
fi

if ! test -e ${times_dir} ; then
  echo "WARNING: ${times_dir} not found." ;
  exit 0 ;
fi

rm -f ${output_file} ;
mkdir -p `dirname ${output_file}` ;
touch ${output_file} ;

# No times files in baseline dir
baselineNumTimesFiles=`ls -1 ${baseline_dir}/times_*.txt 2>/dev/null | wc -l` ;
if [ "${baselineNumTimesFiles}" == "0" ] ; then
  echo "WARNING: no time files found in ${baseline_dir}" ;
  exit 0 ;
fi

for elemTmp in `ls ${baseline_dir}/times_*.txt` ; do
  elem=`basename ${elemTmp}` ;
  benchmark_name=`echo ${elem} | python3 -c 'from sys import stdin; import numpy as np; nums = [str(i) for i in stdin.read().split()]; print(nums[0].split("_", 1)[-1][:-4])'` ;

  baseline_file="${baseline_dir}/${elem}" ;
  baseline_median=`cat ${baseline_file} | python3 -c 'from sys import stdin; import numpy as np; nums = [float(i) for i in stdin.read().split() if (i.replace(".", "", 1).isdigit())]; print(np.median(nums)) if (len(nums) > 0) else print("");'` ;

  # No valid baseline times, print name of the benchmark and move on
  if [ "${baseline_median}" == "" ] ; then
    speedup="no experiment data" ;
    output_string="${benchmark_name} ${speedup}" ;
    echo "${output_string}" >> ${output_file} ;
    echo "${output_string}" ;
    continue ;
  fi

  times_file="${times_dir}/${elem}" ;
  if ! test -f ${times_file} ; then
    echo "WARNING: ${times_file} not found. Setting speedup to empty." ;
    speedup="no baseline data file" ;
  else
    times_median=`cat ${times_file} | python3 -c 'from sys import stdin; import numpy as np; nums = [float(i) for i in stdin.read().split() if (i.replace(".", "", 1).isdigit())]; print(np.median(nums)) if (len(nums) > 0) else print("");'` ;
    # No valid times, print name of the benchmark and move on
    if [ "${times_median}" == "" ] ; then
      speedup="no baseline data" ;
    else
      speedup=`echo "scale=3 ; ${baseline_median}/${times_median}" | bc` ;
    fi
  fi

  output_string="${benchmark_name} ${speedup}" ;
  echo "${output_string}" >> ${output_file} ;
  echo "${output_string}" ;

  # streamcluster and streamclassifier are the same for the purpose of CARMOT, the difference is in the STATS parallelization choices
  if [ "${benchmark_name}" == "streamcluster" ] ; then
    output_string="streamclassifier ${speedup}" ;
    echo "${output_string}" >> ${output_file} ;
    echo "${output_string}" ;
  fi
    
done

#geomean=`cat ${output_file} | awk '{print $2}' | python3 -c 'from sys import stdin; from scipy.stats.mstats import gmean; nums = [float(i) for i in stdin.read().split()]; print(gmean(nums))'` ;
#echo "geo. mean ${geomean}" ;
